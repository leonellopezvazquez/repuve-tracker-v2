//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace PIPS.BOF2InputCapture {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="InputCaptureWebServiceSoapBinding", Namespace="http://80.177.196.221:8081/bof2/services/InputCaptureWebService")]
    public partial class InputCaptureWebServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback sendCaptureOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public InputCaptureWebServiceService() {
            this.Url = "http://80.177.196.221:8081/bof2/services/InputCaptureWebService";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event sendCaptureCompletedEventHandler sendCaptureCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://input.webservices.bof2.anite.com", ResponseNamespace="http://80.177.196.221:8081/bof2/services/InputCaptureWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("sendCaptureReturn")]
        public string sendCapture(
                    string signatureOfSender, 
                    string username, 
                    string vrm, 
                    short feedIdentifier, 
                    short sourceIdentifier, 
                    short cameraIdentifier, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] plateJpegImage, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] overviewJpegImage, 
                    System.DateTime captureTime, 
                    float latitude, 
                    float longitude, 
                    short cameraPresetPosition, 
                    string cameraPan, 
                    string cameraTilt, 
                    string cameraZoom, 
                    sbyte confidencePercentage, 
                    bool motionTowardCamera) {
            object[] results = this.Invoke("sendCapture", new object[] {
                        signatureOfSender,
                        username,
                        vrm,
                        feedIdentifier,
                        sourceIdentifier,
                        cameraIdentifier,
                        plateJpegImage,
                        overviewJpegImage,
                        captureTime,
                        latitude,
                        longitude,
                        cameraPresetPosition,
                        cameraPan,
                        cameraTilt,
                        cameraZoom,
                        confidencePercentage,
                        motionTowardCamera});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginsendCapture(
                    string signatureOfSender, 
                    string username, 
                    string vrm, 
                    short feedIdentifier, 
                    short sourceIdentifier, 
                    short cameraIdentifier, 
                    byte[] plateJpegImage, 
                    byte[] overviewJpegImage, 
                    System.DateTime captureTime, 
                    float latitude, 
                    float longitude, 
                    short cameraPresetPosition, 
                    string cameraPan, 
                    string cameraTilt, 
                    string cameraZoom, 
                    sbyte confidencePercentage, 
                    bool motionTowardCamera, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("sendCapture", new object[] {
                        signatureOfSender,
                        username,
                        vrm,
                        feedIdentifier,
                        sourceIdentifier,
                        cameraIdentifier,
                        plateJpegImage,
                        overviewJpegImage,
                        captureTime,
                        latitude,
                        longitude,
                        cameraPresetPosition,
                        cameraPan,
                        cameraTilt,
                        cameraZoom,
                        confidencePercentage,
                        motionTowardCamera}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndsendCapture(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendCaptureAsync(
                    string signatureOfSender, 
                    string username, 
                    string vrm, 
                    short feedIdentifier, 
                    short sourceIdentifier, 
                    short cameraIdentifier, 
                    byte[] plateJpegImage, 
                    byte[] overviewJpegImage, 
                    System.DateTime captureTime, 
                    float latitude, 
                    float longitude, 
                    short cameraPresetPosition, 
                    string cameraPan, 
                    string cameraTilt, 
                    string cameraZoom, 
                    sbyte confidencePercentage, 
                    bool motionTowardCamera) {
            this.sendCaptureAsync(signatureOfSender, username, vrm, feedIdentifier, sourceIdentifier, cameraIdentifier, plateJpegImage, overviewJpegImage, captureTime, latitude, longitude, cameraPresetPosition, cameraPan, cameraTilt, cameraZoom, confidencePercentage, motionTowardCamera, null);
        }
        
        /// <remarks/>
        public void sendCaptureAsync(
                    string signatureOfSender, 
                    string username, 
                    string vrm, 
                    short feedIdentifier, 
                    short sourceIdentifier, 
                    short cameraIdentifier, 
                    byte[] plateJpegImage, 
                    byte[] overviewJpegImage, 
                    System.DateTime captureTime, 
                    float latitude, 
                    float longitude, 
                    short cameraPresetPosition, 
                    string cameraPan, 
                    string cameraTilt, 
                    string cameraZoom, 
                    sbyte confidencePercentage, 
                    bool motionTowardCamera, 
                    object userState) {
            if ((this.sendCaptureOperationCompleted == null)) {
                this.sendCaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendCaptureOperationCompleted);
            }
            this.InvokeAsync("sendCapture", new object[] {
                        signatureOfSender,
                        username,
                        vrm,
                        feedIdentifier,
                        sourceIdentifier,
                        cameraIdentifier,
                        plateJpegImage,
                        overviewJpegImage,
                        captureTime,
                        latitude,
                        longitude,
                        cameraPresetPosition,
                        cameraPan,
                        cameraTilt,
                        cameraZoom,
                        confidencePercentage,
                        motionTowardCamera}, this.sendCaptureOperationCompleted, userState);
        }
        
        private void OnsendCaptureOperationCompleted(object arg) {
            if ((this.sendCaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendCaptureCompleted(this, new sendCaptureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void sendCaptureCompletedEventHandler(object sender, sendCaptureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendCaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendCaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591